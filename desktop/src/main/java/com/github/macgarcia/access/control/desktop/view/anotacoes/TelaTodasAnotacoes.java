package com.github.macgarcia.access.control.desktop.view.anotacoes;

import com.github.macgarcia.access.control.desktop.component.ModeloTabelaNota;
import com.github.macgarcia.access.control.desktop.configuration.Configuracao;
import com.github.macgarcia.access.control.desktop.configuration.FactoryLog;
import com.github.macgarcia.access.control.desktop.configuration.FactoryMensagem;
import com.github.macgarcia.access.control.desktop.configuration.FactoryTela;
import com.github.macgarcia.access.control.desktop.model.Nota;
import com.github.macgarcia.access.control.desktop.service.NotaService;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Objects;
import java.util.logging.Logger;
import javax.swing.JDesktopPane;

/**
 *
 * @author macgarcia
 */
public class TelaTodasAnotacoes extends javax.swing.JInternalFrame {

    private static final Logger LOGGER = FactoryLog.getLog();
    private final int DUPLO_CLICK = 2;

    private final NotaService service;
    private ModeloTabelaNota model;
    private Nota notaSelecionada;
    private JDesktopPane desktop;
    private final Long ZERO = 0L;
    
    private int pagina = 1;

    /**
     * Creates new form TelaTodasAnotacoes
     *
     */
    public TelaTodasAnotacoes() {
        initComponents();
        service = new NotaService();
        configurarJanela();
        construirTabela();
        acoesDosBotoes();
        acaoDeClickDeSelecaoNaTabela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableNotas = new javax.swing.JTable();
        btnEditar = new javax.swing.JButton();
        btnVer = new javax.swing.JButton();
        btnApagar = new javax.swing.JButton();
        txtPesquisar = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        btnLimparPesquisa = new javax.swing.JButton();
        btnProxima = new javax.swing.JButton();
        btnAnterior = new javax.swing.JButton();

        jLabel3.setText("jLabel3");

        setClosable(true);
        setIconifiable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Minhas anotações");

        jTableNotas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTableNotas);

        btnEditar.setText("Editar");

        btnVer.setText("Ver");

        btnApagar.setForeground(new java.awt.Color(255, 0, 0));
        btnApagar.setText("Apagar");

        btnPesquisar.setForeground(new java.awt.Color(51, 153, 0));
        btnPesquisar.setText("Pesquisar");

        btnLimparPesquisa.setForeground(new java.awt.Color(51, 51, 255));
        btnLimparPesquisa.setText("Limpar pesquisa");

        btnProxima.setText(">>>");

        btnAnterior.setText("<<<");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 883, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnApagar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnVer)
                        .addGap(18, 18, 18)
                        .addComponent(btnEditar))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesquisar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnLimparPesquisa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAnterior)
                        .addGap(18, 18, 18)
                        .addComponent(btnProxima)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnPesquisar)
                        .addComponent(btnLimparPesquisa))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnProxima)
                        .addComponent(btnAnterior)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditar)
                    .addComponent(btnVer)
                    .addComponent(btnApagar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnterior;
    private javax.swing.JButton btnApagar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnLimparPesquisa;
    private javax.swing.JButton btnPesquisar;
    private javax.swing.JButton btnProxima;
    private javax.swing.JButton btnVer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableNotas;
    private javax.swing.JTextField txtPesquisar;
    // End of variables declaration//GEN-END:variables

    private void configurarJanela() {
        setTitle("Minhas anotações");
        setResizable(false);
    }

    private void construirTabela() {
        this.model = new ModeloTabelaNota();
        this.jTableNotas.setModel(this.model);
        this.jTableNotas.getTableHeader().setReorderingAllowed(false);
    }

    private void acoesDosBotoes() {
        this.btnAnterior.addActionListener(ev -> paginaAnterior());
        this.btnProxima.addActionListener(ev -> proximaPagina());
        this.btnEditar.addActionListener(ev -> editarNota());
        this.btnVer.addActionListener(ev -> verNota());
        this.btnApagar.addActionListener(ev -> apagarNota());
        this.btnPesquisar.addActionListener(ev -> pesquisar());
        this.btnLimparPesquisa.addActionListener(ev -> limparPesquisa());
    }

    private void acaoDeClickDeSelecaoNaTabela() {
        this.jTableNotas.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                notaSelecionada = model.getNota(jTableNotas.getSelectedRow());
                if (e.getClickCount() == DUPLO_CLICK) {
                    verNota();
                }
            }
        });
    }
    
    private void proximaPagina() {
        this.pagina++;
        this.model.paginar(pagina);
        int linhasNaTabela = this.model.getRowCount();
        if (linhasNaTabela == 0) {
            FactoryMensagem.mensagemAlerta("Não existem mais dados...");
        }
        notaSelecionada = null;
        this.jTableNotas.updateUI();
    }
    
    private void paginaAnterior() {
        if (this.pagina == 1) {
            FactoryMensagem.mensagemAlerta("Você esta na primeira pagina...");
            return;
        }
        this.pagina--;
        this.model.paginar(pagina);
        notaSelecionada = null;
        this.jTableNotas.updateUI();
    }

    public void setDesktop(JDesktopPane desktop) {
        this.desktop = desktop;
    }

    /* Comportamentos*/
    private void editarNota() {
        if (Objects.isNull(notaSelecionada)) {
            FactoryMensagem.mensagemAlerta("Selecione uma nota na tabela.");
        } else {
            if (Configuracao.verificarJanelaAberta(desktop, TelaCadastroNota.class)) {
                FactoryMensagem.mensagemAlerta("Tela já esta aberta para edição.");
            } else {
                final TelaCadastroNota tela = FactoryTela.criarTela(TelaCadastroNota.class, desktop);
                tela.setAtualizacaoDeNota(true);
                tela.setNotaParaAtualizar(notaSelecionada);
                tela.setDadosNaTelaDeAtualização(this.notaSelecionada);
            }
        }
    }

    /* Utilizado no duplo click na tabela de todas as notas, e tambem, no click do botão ver */
    private void verNota() {
        if (Configuracao.verificarJanelaAberta(desktop, TelaVerDadosNota.class)) {
            FactoryMensagem.mensagemAlerta("Seus dados ja estão em vizualização.");
        } else {
            if (Objects.isNull(notaSelecionada)) {
                FactoryMensagem.mensagemAlerta("Selecione uma nota.");
            } else {
                final TelaVerDadosNota tela = FactoryTela.criarTela(TelaVerDadosNota.class, desktop);
                tela.mostrarDados(notaSelecionada);
            }
        }
    }

    private void apagarNota() {
        if (Objects.isNull(notaSelecionada)) {
            FactoryMensagem.mensagemAlerta("Selecione uma nota na tabela.");
        } else {
            final int resposta = FactoryMensagem.mensagemConfirmacao();
            if (resposta == ZERO) {
                service.apagar(notaSelecionada.getId());
                construirTabela();
                FactoryMensagem.mensagemOk("Nota apagada com sucesso.");
                LOGGER.info(String.format("Nota apagada com sucesso. [%s]", notaSelecionada));
            }
            notaSelecionada = null;
        }
    }

    private void pesquisar() {
        final String chave = this.txtPesquisar.getText().trim();
        if (!chave.isEmpty()) {
            this.model.pesquisar(chave);
            this.jTableNotas.updateUI();
        } else {
            FactoryMensagem.mensagemAlerta("Digite algo no campo de pesquisa.");
        }
        notaSelecionada = null;
    }

    private void limparPesquisa() {
        this.txtPesquisar.setText(null);
        notaSelecionada = null;
        construirTabela();
    }
    
}
