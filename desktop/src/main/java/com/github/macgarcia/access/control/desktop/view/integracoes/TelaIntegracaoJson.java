package com.github.macgarcia.access.control.desktop.view.integracoes;

import com.github.macgarcia.access.control.desktop.configuration.Configuracao;
import com.github.macgarcia.access.control.desktop.configuration.FactoryMensagem;
import com.github.macgarcia.access.control.desktop.enuns.AcaoParaArquivo;
import com.github.macgarcia.access.control.desktop.enuns.FlagIntegracao;
import com.github.macgarcia.access.control.desktop.model.Nota;
import com.github.macgarcia.access.control.desktop.repository.NotaRepository;
import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author macgarcia
 */
public class TelaIntegracaoJson extends javax.swing.JInternalFrame {

    /**
     * Creates new form TelaIntegracaoJson
     */
    public TelaIntegracaoJson() {
        initComponents();
        configurarJanela();
        acoesDosBotoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCaminho = new javax.swing.JTextField();
        btnProcurar = new javax.swing.JButton();
        btnIniciar = new javax.swing.JButton();
        lblProgresso = new javax.swing.JLabel();
        barraProgresso = new javax.swing.JProgressBar();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Caminho do arquivo");

        btnProcurar.setText("Procurar");

        btnIniciar.setText("Iniciar");

        lblProgresso.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblProgresso.setText("jLabel2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCaminho, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnProcurar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(btnIniciar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(barraProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCaminho, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnProcurar))
                .addGap(18, 18, 18)
                .addComponent(lblProgresso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                .addComponent(btnIniciar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnProcurar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel lblProgresso;
    private javax.swing.JTextField txtCaminho;
    // End of variables declaration//GEN-END:variables

    private void configurarJanela() {
        setTitle("Importação de dados via Json");
        setResizable(false);
        btnIniciar.setEnabled(false);
        txtCaminho.setEditable(false);
        lblProgresso.setText("Aguardando aquivo...");
    }

    private void acoesDosBotoes() {

        this.btnProcurar.addActionListener(ev -> {
            Configuracao.construirLancador(true, txtCaminho, AcaoParaArquivo.ABRIR);
            if (!txtCaminho.getText().isEmpty()) {
                lblProgresso.setText("Arquivo selecionado.");
                btnIniciar.setEnabled(true);
            }
        });

        this.btnIniciar.addActionListener(ev -> {
            try {
                barraProgresso.setIndeterminate(true);

                final String json = lerArquivo();

                final Gson gson = Configuracao.getGson();

                var typeToken = new TypeToken<List<Nota>>() {};
                
                final List<Nota> dados = gson.fromJson(json, typeToken.getType());
                
                processarDados(dados);
                persistirDados(dados);              
                
                barraProgresso.setIndeterminate(false);
                
                FactoryMensagem.mensagemOk("Integração concluida com sucesso.");
            } catch (IOException ex) {
                Logger.getLogger(TelaIntegracaoJson.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    private String lerArquivo() throws IOException {
        Path path = Paths.get(txtCaminho.getText());
        return Files.readString(path);
    }

    private void processarDados(final List<Nota> dados) {
        dados.forEach(nota -> {
            nota.setFlagIntegrado(FlagIntegracao.LIGADO);
            nota.getHistorico().forEach(h -> h.setNota(nota));
        });
    }

    private void persistirDados(final List<Nota> dados) {
        NotaRepository repository = new NotaRepository();
        repository.persistAll(dados);
    }

}
