package com.github.macgarcia.access.control.desktop.view.anotacoes;

import com.github.macgarcia.access.control.desktop.configuration.Configuracao;
import com.github.macgarcia.access.control.desktop.configuration.FactoryLog;
import com.github.macgarcia.access.control.desktop.configuration.FactoryMensagem;
import com.github.macgarcia.access.control.desktop.model.FlagIntegracao;
import com.github.macgarcia.access.control.desktop.model.Nota;
import com.github.macgarcia.access.control.desktop.service.NotaService;
import java.time.LocalDateTime;
import java.util.logging.Logger;

/**
 *
 * @author macgarcia
 */
public class TelaCadastroNota extends javax.swing.JInternalFrame {

    private static final Logger LOGGER = FactoryLog.getLog();

    private final NotaService service;
    private boolean atualizacaoDeNota;
    private Nota notaParaAtualizar;
    private final String[] metodos = {"Título-getTitulo", "Usuário-getUsuario", "Senha-getSenha"};

    /**
     * Creates new form TelaCadastroNota
     */
    public TelaCadastroNota() {
        initComponents();
        this.service = new NotaService();
        configurarJanela();
        acoesBotoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTitulo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDescricao = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtUsuario = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtSenha = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtUrlSite = new javax.swing.JTextField();
        btnSalvar = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Titulo");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Descrição");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Usuário");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Senha");

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel5.setText("Url do site");

        btnSalvar.setText("Salvar");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSalvar, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel1)
                                    .addGap(129, 129, 129)
                                    .addComponent(jLabel2))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addComponent(txtUsuario, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                                            .addComponent(txtTitulo, javax.swing.GroupLayout.Alignment.LEADING))
                                        .addComponent(jLabel3))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel4)
                                        .addComponent(txtDescricao)
                                        .addComponent(txtSenha, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(142, 142, 142)
                            .addComponent(jLabel5))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(txtUrlSite))))
                .addContainerGap(9, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTitulo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDescricao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSenha, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUrlSite, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnSalvar)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSalvar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JTextField txtDescricao;
    private javax.swing.JTextField txtSenha;
    private javax.swing.JTextField txtTitulo;
    private javax.swing.JTextField txtUrlSite;
    private javax.swing.JTextField txtUsuario;
    // End of variables declaration//GEN-END:variables

    private void configurarJanela() {
        setTitle("Cadastro de nova anotação");
        setResizable(false);
    }

    private void acoesBotoes() {

        this.btnSalvar.addActionListener(ev -> {

            if (this.atualizacaoDeNota) {

                LOGGER.info("Atualização de uma nota");

                this.preencherDadosNovosDaNota();
                final boolean validou = validar(notaParaAtualizar);
                if (validou) {
                    final boolean salvou = service.salvarNota(notaParaAtualizar);
                    if (salvou) {
                        FactoryMensagem.mensagemOk("Nota atualizada com sucesso");
                        LOGGER.info(String.format("Nota atualizada. [%s]", notaParaAtualizar));
                        this.notaParaAtualizar = null;
                        this.dispose();
                    } else {
                        FactoryMensagem.mensagemErro("Erro ao atualizar a nota");
                    }
                }
            } else {

                LOGGER.info("Criação de uma nova nota.");

                final Nota novaNota = capturarInformacoesDaTela();
                final boolean validou = validar(novaNota);
                if (validou) {
                    final boolean salvou = service.salvarNota(novaNota);
                    if (salvou) {
                        FactoryMensagem.mensagemOk("Nota salva com sucesso");
                        LOGGER.info(String.format("Nota inserida. [%s]", novaNota));
                        this.dispose();
                    } else {
                        FactoryMensagem.mensagemOk("Erro ao salvar a nota.");
                    }
                }
            }
        });
    }

    private boolean validar(final Nota nota) {
        return Configuracao.validar(metodos, nota, Nota.class);
    }

    private Nota capturarInformacoesDaTela() {
        final String titulo = txtTitulo.getText().trim();
        final String descricao = txtDescricao.getText().trim();
        final String usuario = txtUsuario.getText().trim();
        final String senha = txtSenha.getText().trim();
        final String urlSite = txtUrlSite.getText().trim();
        return new Nota(titulo, descricao, usuario, senha, urlSite);
    }

    private void preencherDadosNovosDaNota() {
        final Nota dadosNovosDaNota = capturarInformacoesDaTela();
        this.notaParaAtualizar.setTitulo(dadosNovosDaNota.getTitulo());
        this.notaParaAtualizar.setDescricao(dadosNovosDaNota.getDescricao());
        this.notaParaAtualizar.setUsuario(dadosNovosDaNota.getUsuario());
        this.notaParaAtualizar.setSenha(dadosNovosDaNota.getSenha());
        this.notaParaAtualizar.setUrlSite(dadosNovosDaNota.getUrlSite());
        this.notaParaAtualizar.setDataAtualizacao(LocalDateTime.now());
        this.notaParaAtualizar.setFlagIntegrado(FlagIntegracao.LIGADO);
    }

    /* Iniciar a tela com os dados da nota selecionada para atualização */
    public void setDadosNaTelaDeAtualização(final Nota nota) {
        this.notaParaAtualizar = nota;
        this.txtTitulo.setText(nota.getTitulo());
        this.txtDescricao.setText(nota.getDescricao());
        this.txtUsuario.setText(nota.getUsuario());
        this.txtSenha.setText(nota.getSenha());
        this.txtUrlSite.setText(nota.getUrlSite());
    }

    /* Indicador de ação para a nota, nova ou atualização */
    public void setAtualizacaoDeNota(final boolean atualizacaoDeNota) {
        this.atualizacaoDeNota = atualizacaoDeNota;
    }

    /* Nota que será atualizada */
    public void setNotaParaAtualizar(final Nota notaParaAtualizar) {
        this.notaParaAtualizar = notaParaAtualizar;
    }

}
