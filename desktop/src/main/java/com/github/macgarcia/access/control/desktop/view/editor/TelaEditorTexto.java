package com.github.macgarcia.access.control.desktop.view.editor;

import com.github.macgarcia.access.control.desktop.configuration.Configuracao;
import com.github.macgarcia.access.control.desktop.configuration.FactoryMensagem;
import com.github.macgarcia.access.control.desktop.enuns.AcaoParaArquivo;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Objects;

/**
 *
 * @author macgarcia
 */
public class TelaEditorTexto extends javax.swing.JInternalFrame {

    private final String TITULO = "Sem nome";
    private String caminhoDoArquivoUtilizado = null;
    private String texto = null;

    /**
     * Creates new form TelaEditorTexto
     */
    public TelaEditorTexto() {
        initComponents();
        configurarJanela();
        acoesMenuArquivo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaTexto = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        btnItemMenuAbrirArquivo = new javax.swing.JMenuItem();
        btnItemMenuSalvar = new javax.swing.JMenuItem();

        setClosable(true);
        setIconifiable(true);

        txtAreaTexto.setColumns(20);
        txtAreaTexto.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        txtAreaTexto.setRows(5);
        jScrollPane1.setViewportView(txtAreaTexto);

        jMenu1.setText("Arquivo");

        btnItemMenuAbrirArquivo.setText("Abrir arquivo");
        jMenu1.add(btnItemMenuAbrirArquivo);

        btnItemMenuSalvar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        btnItemMenuSalvar.setText("Salvar");
        jMenu1.add(btnItemMenuSalvar);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 938, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 629, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem btnItemMenuAbrirArquivo;
    private javax.swing.JMenuItem btnItemMenuSalvar;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtAreaTexto;
    // End of variables declaration//GEN-END:variables

    private void configurarJanela() {
        setTitle(TITULO);
        setResizable(true);
    }

    private void acoesMenuArquivo() {

        this.btnItemMenuAbrirArquivo.addActionListener(ev -> {
            caminhoDoArquivoUtilizado = Configuracao.construirLancador(true, AcaoParaArquivo.ABRIR);
            if (Objects.nonNull(caminhoDoArquivoUtilizado)) {
                setTitle(caminhoDoArquivoUtilizado);
                abrirArquivoSelecionado();
            }
        });

        this.btnItemMenuSalvar.addActionListener(ev -> {
            
            /* Se o arquivo não existir, será pedido para escolher um lugar para salva-lo. */
            if (Objects.isNull(caminhoDoArquivoUtilizado)) {
                caminhoDoArquivoUtilizado = Configuracao.construirLancadorDeSalvamento(AcaoParaArquivo.SALVAR);
            }
            
            recuperarTextoDaTela();
            
            /* Se não houve a escolha de um diretorio para salvar, apenas ignora a ação. */
            if (Objects.nonNull(caminhoDoArquivoUtilizado)) {
                salvar();
            }
        });
    }

    private void abrirArquivoSelecionado() {
        try ( var fileReader = new FileReader(caminhoDoArquivoUtilizado, StandardCharsets.UTF_8);
                var bufferedReader = new BufferedReader(fileReader)) {
            final StringBuilder texto = new StringBuilder();
            String linha = null;
            while ((linha = bufferedReader.readLine()) != null) {
                texto.append(linha).append(System.lineSeparator());
            }
            txtAreaTexto.setText(texto.toString());
        } catch (Exception e) {
        }
    }

    private void recuperarTextoDaTela() {
        texto = txtAreaTexto.getText();
        System.out.println(texto);
    }

    private void salvar() {
        try (FileWriter writer = new FileWriter(caminhoDoArquivoUtilizado, StandardCharsets.UTF_8)) {
            writer.write(texto);
        } catch (IOException e) {

        }
    }

}
