package com.github.macgarcia.access.control.desktop.view.integracoes;

import com.github.macgarcia.access.control.desktop.configuration.Configuracao;
import com.github.macgarcia.access.control.desktop.configuration.FactoryLog;
import com.github.macgarcia.access.control.desktop.configuration.FactoryMensagem;
import com.github.macgarcia.access.control.desktop.enuns.AcaoParaArquivo;
import com.github.macgarcia.access.control.desktop.model.HistoricoNota;
import com.github.macgarcia.access.control.desktop.model.Nota;
import com.github.macgarcia.access.control.desktop.pojo.PojoDadosExportacao;
import com.github.macgarcia.access.control.desktop.repository.NotaRepository;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;
import java.util.stream.Stream;

/**
 *
 * @author macgarcia
 */
public class TelaDeExportacaoDados extends javax.swing.JInternalFrame {

    private static final Logger LOGGER = FactoryLog.getLog();

    private PojoDadosExportacao pojo;
    private List<Nota> notas;
    private final NotaRepository repository;

    /**
     * Creates new form TelaDeExportacaoDados
     */
    public TelaDeExportacaoDados() {
        initComponents();
        repository = new NotaRepository();
        configurarJanela();
        acoesDoBotoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCaminhoArquivoDescarga = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        jDateChooserInicial = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JDateChooserFinal = new com.toedter.calendar.JDateChooser();
        btnIniciar = new javax.swing.JButton();
        lblProgresso = new javax.swing.JLabel();
        barraProgresso = new javax.swing.JProgressBar();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Caminho de exportação");

        btnPesquisar.setText("Procurar");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Data inicial");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Data final");

        btnIniciar.setText("Iniciar");

        lblProgresso.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblProgresso.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDateChooserInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(55, 55, 55)
                                .addComponent(jLabel2)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(80, 80, 80)
                                .addComponent(jLabel3)
                                .addContainerGap(133, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(JDateChooserFinal, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(78, 78, 78))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(lblProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(btnIniciar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(barraProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtCaminhoArquivoDescarga)
                                .addGap(18, 18, 18)
                                .addComponent(btnPesquisar)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCaminhoArquivoDescarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JDateChooserFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addComponent(lblProgresso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(btnIniciar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser JDateChooserFinal;
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnPesquisar;
    private com.toedter.calendar.JDateChooser jDateChooserInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblProgresso;
    private javax.swing.JTextField txtCaminhoArquivoDescarga;
    // End of variables declaration//GEN-END:variables

    private void configurarJanela() {
        setTitle("Exportar dados");
        setResizable(false);
        jDateChooserInicial.setDateFormatString("dd/MM/yyyy HH:mm:ss");
        JDateChooserFinal.setDateFormatString("dd/MM/yyyy HH:mm:ss");
        this.lblProgresso.setText("Aguardando diretório...");
        this.txtCaminhoArquivoDescarga.setEditable(false);
    }

    private void acoesDoBotoes() {

        this.btnPesquisar.addActionListener(ev -> {
            Configuracao.construirLancador(false, txtCaminhoArquivoDescarga, AcaoParaArquivo.ABRIR);
        });

        this.btnIniciar.addActionListener(ev -> {
            LOGGER.info("Iniciando processo de exportação de dados...");
            if (validarDados()) {

                this.lblProgresso.setText("Executando busca dos dados...");
                barraProgresso.setIndeterminate(true);
                this.notas = this.repository.getNotasParaExportacao(this.pojo);

                final boolean escreveuTxt = escreverTxt();
                if (escreveuTxt) {
                    this.lblProgresso.setText("Arquivo escrito com sucesso.");
                    FactoryMensagem.mensagemOk("Exportação feita com sucesso.");
                }

            } else {
                FactoryMensagem.mensagemOk("Todos os dados são obrigatórios.");
            }
            barraProgresso.setIndeterminate(false);
            LOGGER.info("Fim do processo de exportação de dados.");
        });
    }

    private boolean validarDados() {

        final String caminho = this.txtCaminhoArquivoDescarga.getText().trim();
        final Date dInicial = jDateChooserInicial.getDate();
        final Date dFinal = JDateChooserFinal.getDate();

        if (!caminho.isEmpty() && dInicial != null && dFinal != null) {

            final LocalDateTime dataInicial = dInicial.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDateTime();

            final LocalDateTime dataFinal = dFinal.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDateTime();

            pojo = new PojoDadosExportacao(caminho, dataInicial, dataFinal);
            LOGGER.info(String.format("Filtro de dados: [%s]", pojo));
            return true;
        } else {
            LOGGER.warning(String.format("Dados inválidos.: [%s]", pojo));
            return false;
        }
    }

    private boolean escreverTxt() {
        if (this.notas.isEmpty()) {
            LOGGER.info("Nenhum dado foi encontrado com o filtro informado.");
            FactoryMensagem.mensagemAlerta("Não existe notas no periodo informado.");
            return false;
        } else {
            LOGGER.info("Tratamento dos dados recuperados.");
            final String arquivo = criarArquivo();
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(arquivo, StandardCharsets.UTF_8))) {
                final List<String> linhas = criarConteudoArquivo(notas);
                LOGGER.info("Ecrevendo arquivo...");
                escreverConteudoNoArquivo(linhas, writer);
                LOGGER.info("Arquivo escrito com sucesso.");
                LOGGER.info(String.format("Arquivo disponibilizado em: [%s]", arquivo));
                return true;
            } catch (Exception e) {
                LOGGER.severe(String.format("Erro ao criar o arquivo de exportação.: [%s]", e.getMessage()));
                FactoryMensagem.mensagemErro("Erro ao criar o arquivo de exportação.");
                return false;
            }
        }
    }

    private String criarArquivo() {
        return this.txtCaminhoArquivoDescarga.getText()
                + File.separator + "arq_export_"
                + DateTimeFormatter.ofPattern("dd-MM-yyyy-HH-mm-ss").format(LocalDateTime.now()) + ".txt";
    }

    private List<String> criarConteudoArquivo(List<Nota> notas) {
        return notas.stream()
                .flatMap(nota -> {
                    Stream<String> notaStream = Stream.of(nota.montarNotaTxt());
                    Stream<String> historicosStream = nota.getHistorico().stream()
                            .map(HistoricoNota::montarHistoricoTxt);
                    return Stream.concat(notaStream, historicosStream);
                })
                .toList();
    }

    private void escreverConteudoNoArquivo(List<String> linhas, BufferedWriter writer) {
        linhas.forEach(linha -> {
            try {
                writer.write(linha);
                writer.newLine();
            } catch (IOException e) {
                LOGGER.severe(String.format("Erro ao escrever o arquivo.: [%s]", e.getMessage()));
                FactoryMensagem.mensagemErro("Erro ao escrever os dados no arquivo");
                throw new RuntimeException("Erro ao escrever os dados no arquivo", e);
            }
        });
    }

}
