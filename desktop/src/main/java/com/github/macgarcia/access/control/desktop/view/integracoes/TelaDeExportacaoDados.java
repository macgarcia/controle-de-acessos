package com.github.macgarcia.access.control.desktop.view.integracoes;

import com.github.macgarcia.access.control.desktop.configuration.Configuracao;
import com.github.macgarcia.access.control.desktop.configuration.FactoryLog;
import com.github.macgarcia.access.control.desktop.configuration.FactoryMensagem;
import com.github.macgarcia.access.control.desktop.model.HistoricoNota;
import com.github.macgarcia.access.control.desktop.model.Nota;
import com.github.macgarcia.access.control.desktop.pojo.PojoDadosExportacao;
import com.github.macgarcia.access.control.desktop.repository.NotaRepository;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

/**
 *
 * @author macgarcia
 */
public class TelaDeExportacaoDados extends javax.swing.JInternalFrame {

    private static final Logger LOGGER = FactoryLog.getLog();

    private final DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
    private final DateTimeFormatter df = DateTimeFormatter.ofPattern("dd-MM-yyyy-HH-mm-ss");
    private PojoDadosExportacao pojo;
    private List<Nota> notas;
    private NotaRepository repository;

    private List<String> linhas = null;

    /**
     * Creates new form TelaDeExportacaoDados
     */
    public TelaDeExportacaoDados() {
        initComponents();
        repository = new NotaRepository();
        configurarJanela();
        acoesDoBotoes();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtCaminhoArquivoDescarga = new javax.swing.JTextField();
        btnPesquisar = new javax.swing.JButton();
        jDateChooserInicial = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        JDateChooserFinal = new com.toedter.calendar.JDateChooser();
        btnIniciar = new javax.swing.JButton();
        lblProgresso = new javax.swing.JLabel();
        barraProgresso = new javax.swing.JProgressBar();

        setClosable(true);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setText("Caminho de exportação");

        btnPesquisar.setText("Procurar");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setText("Data inicial");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel3.setText("Data final");

        btnIniciar.setText("Iniciar");

        lblProgresso.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblProgresso.setText("jLabel4");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(barraProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtCaminhoArquivoDescarga)
                        .addGap(18, 18, 18)
                        .addComponent(btnPesquisar))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(lblProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDateChooserInicial, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(55, 55, 55)
                                        .addComponent(jLabel2)))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(JDateChooserFinal, javax.swing.GroupLayout.DEFAULT_SIZE, 185, Short.MAX_VALUE)
                                        .addGap(21, 21, 21))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(80, 80, 80)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addComponent(btnIniciar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCaminhoArquivoDescarga, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JDateChooserFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jDateChooserInicial, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnIniciar))
                .addGap(18, 18, 18)
                .addComponent(lblProgresso)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(47, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser JDateChooserFinal;
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton btnIniciar;
    private javax.swing.JButton btnPesquisar;
    private com.toedter.calendar.JDateChooser jDateChooserInicial;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel lblProgresso;
    private javax.swing.JTextField txtCaminhoArquivoDescarga;
    // End of variables declaration//GEN-END:variables

    private void configurarJanela() {
        setTitle("Exportar dados");
        setResizable(false);
        jDateChooserInicial.setDateFormatString("dd/MM/yyyy HH:mm:ss");
        JDateChooserFinal.setDateFormatString("dd/MM/yyyy HH:mm:ss");
        this.lblProgresso.setText("Aguardando diretório...");
        this.txtCaminhoArquivoDescarga.setEditable(false);
    }

    private void acoesDoBotoes() {

        this.btnPesquisar.addActionListener(ev -> {
            Configuracao.construirLancador(false, txtCaminhoArquivoDescarga);
        });

        this.btnIniciar.addActionListener(ev -> {
            LOGGER.info("Iniciando processo de exportação de dados...");
            if (validarDados()) {

                this.lblProgresso.setText("Executando busca dos dados...");
                barraProgresso.setValue(25);
                this.notas = this.repository.getNotasParaExportacao(this.pojo);

                this.lblProgresso.setText("Escrevendo exportação em texto...");
                barraProgresso.setValue(75);
                escreverTxt();

                this.lblProgresso.setText("Arquivo escrito com sucesso.");
                barraProgresso.setValue(100);
                FactoryMensagem.mensagemOk("Exportação feita com sucesso.");
            } else {
                FactoryMensagem.mensagemOk("Todos os dados são obrigatórios.");
            }
            LOGGER.info("Fim do processo de exportação de dados.");
        });
    }

    private boolean validarDados() {

        final String caminho = this.txtCaminhoArquivoDescarga.getText().trim();
        final Date dInicial = jDateChooserInicial.getDate();
        final Date dFinal = JDateChooserFinal.getDate();

        if (!caminho.isEmpty() && dInicial != null && dFinal != null) {

            final LocalDateTime dataInicial = dInicial.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDateTime();

            final LocalDateTime dataFinal = dFinal.toInstant()
                    .atZone(ZoneId.systemDefault())
                    .toLocalDateTime();

            pojo = new PojoDadosExportacao(caminho, dataInicial, dataFinal);
            LOGGER.info(String.format("Filtro de dados: [%s]", pojo));
            return true;
        } else {
            LOGGER.warning(String.format("Dados inválidos.: [%s]", pojo));
            return false;
        }
    }

    private void escreverTxt() {
        if (this.notas.isEmpty()) {
            LOGGER.info("Nenhum dado foi encontrado com o filtro informado.");
            FactoryMensagem.mensagemAlerta("Não existe notas no periodo informado.");
        } else {
            
            LOGGER.info("Tratamento dos dados recuperados.");
            
            final String caminho = this.txtCaminhoArquivoDescarga.getText()
                    + File.separator + "arq_export_"
                    + df.format(LocalDateTime.now()) + ".txt";

            try (BufferedWriter writer = new BufferedWriter(new FileWriter(caminho, StandardCharsets.UTF_8))) {
                for (Nota n : notas) {
                    getLinhas().add(montaLinhaNota(n));
                    if (!n.getHistorico().isEmpty()) {
                        for (HistoricoNota hn : n.getHistorico()) {
                            getLinhas().add(montarLinhaHistorico(hn));
                        }
                    }
                }
                
                LOGGER.info("Ecrevendo arquivo...");
                
                linhas.forEach(linha -> {
                    try {
                        writer.write(linha);
                        writer.newLine();
                    } catch (IOException e) {
                        LOGGER.severe(String.format("Erro ao escrever o arquivo.: [%s]", e.getMessage()));
                        FactoryMensagem.mensagemErro("Erro ao escrever os dados no arquivo");
                    }
                });
                
                LOGGER.info("Arquivo escrito com sucesso.");
                LOGGER.info(String.format("Arquivo disponibilizado em: [%s]", caminho));
                
            } catch (Exception e) {
                LOGGER.severe(String.format("Erro ao criar o arquivo de exportação.: [%s]", e.getMessage()));
                FactoryMensagem.mensagemErro("Erro ao criar o arquivo de exportação.");
            }
        }
    }

    private String montaLinhaNota(final Nota n) {
        LOGGER.info(String.format("Montando linha de nota, dados:[%s]", n));
        final StringBuilder linha = new StringBuilder();
        linha.append("NOTA")
                .append("|")
                .append(n.getHistorico().size())
                .append("|")
                .append(n.getTitulo())
                .append("|")
                .append(n.getDescricao() != null && n.getDescricao().length() != 0 ? n.getDescricao() : " ")
                .append("|")
                .append(n.getUsuario())
                .append("|")
                .append(n.getSenha())
                .append("|")
                .append(n.getUrlSite() != null && n.getUrlSite().length() != 0 ? n.getUrlSite() : " ");
        LOGGER.info("Linha montada com sucesso.");
        return linha.toString();
    }

    private String montarLinhaHistorico(final HistoricoNota hn) {
        LOGGER.info(String.format("Montando linha de histórico, dados:[%s]", hn));
        final StringBuilder linha = new StringBuilder();
        linha.append("HISTORICO")
                .append("|")
                .append(formatter.format(hn.getDataValidadeInicial()))
                .append("|")
                .append(formatter.format(hn.getDataValidadeFinal()))
                .append("|")
                .append(hn.getNumeroAtualizacao())
                .append("|")
                .append(hn.getDescricao() != null && hn.getDescricao().length() != 0 ? hn.getDescricao() : " ")
                .append("|")
                .append(hn.getTitulo())
                .append("|")
                .append(hn.getUsuario())
                .append("|")
                .append(hn.getSenha())
                .append("|")
                .append(hn.getUrlSite() != null && hn.getUrlSite().length() != 0 ? hn.getUrlSite() : " ");
        LOGGER.info("Linha montada com sucesso.");
        return linha.toString();
    }

    public List<String> getLinhas() {
        if (this.linhas == null) {
            this.linhas = new ArrayList<>();
        }
        return linhas;
    }
}
